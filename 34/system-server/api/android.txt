// Signature format: 2.0
package android.security.rkp.service {

  public class RegistrationProxy {
    method public static void createAsync(@NonNull android.content.Context, int, @NonNull String, @NonNull java.time.Duration, @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<android.security.rkp.service.RegistrationProxy,java.lang.Exception>);
    method public void getKeyAsync(int, @NonNull android.os.CancellationSignal, @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<android.security.rkp.service.RemotelyProvisionedKey,java.lang.Exception>);
    method public void storeUpgradedKeyAsync(@NonNull byte[], @NonNull byte[], @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<java.lang.Void,java.lang.Exception>);
  }

  public class RemotelyProvisionedKey {
    method @NonNull public byte[] getEncodedCertChain();
    method @NonNull public byte[] getKeyBlob();
  }

  public final class RkpProxyException extends java.lang.Exception {
    ctor public RkpProxyException(int, @NonNull String);
    ctor public RkpProxyException(int, @NonNull String, @NonNull Throwable);
    method public int getError();
    field public static final int ERROR_PENDING_INTERNET_CONNECTIVITY = 2; // 0x2
    field public static final int ERROR_PERMANENT = 3; // 0x3
    field public static final int ERROR_REQUIRES_SECURITY_PATCH = 1; // 0x1
    field public static final int ERROR_UNKNOWN = 0; // 0x0
  }

}

package com.android.permission.persistence {

  public interface RuntimePermissionsPersistence {
    method @NonNull public static com.android.permission.persistence.RuntimePermissionsPersistence createInstance();
    method public void deleteForUser(@NonNull android.os.UserHandle);
    method @Nullable public com.android.permission.persistence.RuntimePermissionsState readForUser(@NonNull android.os.UserHandle);
    method public void writeForUser(@NonNull com.android.permission.persistence.RuntimePermissionsState, @NonNull android.os.UserHandle);
  }

  public final class RuntimePermissionsState {
    ctor public RuntimePermissionsState(int, @Nullable String, @NonNull java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>>, @NonNull java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>>);
    method @Nullable public String getFingerprint();
    method @NonNull public java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>> getPackagePermissions();
    method @NonNull public java.util.Map<java.lang.String,java.util.List<com.android.permission.persistence.RuntimePermissionsState.PermissionState>> getSharedUserPermissions();
    method public int getVersion();
    field public static final int NO_VERSION = -1; // 0xffffffff
  }

  public static final class RuntimePermissionsState.PermissionState {
    ctor public RuntimePermissionsState.PermissionState(@NonNull String, boolean, int);
    method public int getFlags();
    method @NonNull public String getName();
    method public boolean isGranted();
  }

}

package com.android.role {

  public interface RoleManagerLocal {
    method @NonNull public java.util.Map<java.lang.String,java.util.Set<java.lang.String>> getRolesAndHolders(int);
  }

}

package com.android.role.persistence {

  public interface RolesPersistence {
    method @NonNull public static com.android.role.persistence.RolesPersistence createInstance();
    method public void deleteForUser(@NonNull android.os.UserHandle);
    method @Nullable public com.android.role.persistence.RolesState readForUser(@NonNull android.os.UserHandle);
    method public void writeForUser(@NonNull com.android.role.persistence.RolesState, @NonNull android.os.UserHandle);
  }

  public final class RolesState {
    ctor public RolesState(int, @Nullable String, @NonNull java.util.Map<java.lang.String,java.util.Set<java.lang.String>>);
    method @Nullable public String getPackagesHash();
    method @NonNull public java.util.Map<java.lang.String,java.util.Set<java.lang.String>> getRoles();
    method public int getVersion();
  }

}

package com.android.server {

  public final class LocalManagerRegistry {
    method public static <T> void addManager(@NonNull Class<T>, @NonNull T);
    method @Nullable public static <T> T getManager(@NonNull Class<T>);
  }

  public abstract class SystemService {
    ctor public SystemService(@NonNull android.content.Context);
    method @NonNull public final android.content.Context getContext();
    method public boolean isUserSupported(@NonNull com.android.server.SystemService.TargetUser);
    method public void onBootPhase(int);
    method public abstract void onStart();
    method public void onUserStarting(@NonNull com.android.server.SystemService.TargetUser);
    method public void onUserStopped(@NonNull com.android.server.SystemService.TargetUser);
    method public void onUserStopping(@NonNull com.android.server.SystemService.TargetUser);
    method public void onUserSwitching(@Nullable com.android.server.SystemService.TargetUser, @NonNull com.android.server.SystemService.TargetUser);
    method public void onUserUnlocked(@NonNull com.android.server.SystemService.TargetUser);
    method public void onUserUnlocking(@NonNull com.android.server.SystemService.TargetUser);
    method protected final void publishBinderService(@NonNull String, @NonNull android.os.IBinder);
    method protected final void publishBinderService(@NonNull String, @NonNull android.os.IBinder, boolean);
    field public static final int PHASE_ACTIVITY_MANAGER_READY = 550; // 0x226
    field public static final int PHASE_BOOT_COMPLETED = 1000; // 0x3e8
    field public static final int PHASE_DEVICE_SPECIFIC_SERVICES_READY = 520; // 0x208
    field public static final int PHASE_LOCK_SETTINGS_READY = 480; // 0x1e0
    field public static final int PHASE_SYSTEM_SERVICES_READY = 500; // 0x1f4
    field public static final int PHASE_THIRD_PARTY_APPS_CAN_START = 600; // 0x258
    field public static final int PHASE_WAIT_FOR_DEFAULT_DISPLAY = 100; // 0x64
  }

  public static final class SystemService.TargetUser {
    method @NonNull public android.os.UserHandle getUserHandle();
  }

}

package com.android.server.am {

  public interface ActivityManagerLocal {
    method public boolean bindSdkSandboxService(@NonNull android.content.Intent, @NonNull android.content.ServiceConnection, int, @NonNull android.os.IBinder, @NonNull String, @NonNull String, int) throws android.os.RemoteException;
    method public boolean bindSdkSandboxService(@NonNull android.content.Intent, @NonNull android.content.ServiceConnection, int, @NonNull android.os.IBinder, @NonNull String, @NonNull String, @NonNull android.content.Context.BindServiceFlags) throws android.os.RemoteException;
    method @Deprecated public boolean bindSdkSandboxService(@NonNull android.content.Intent, @NonNull android.content.ServiceConnection, int, @NonNull String, @NonNull String, int) throws android.os.RemoteException;
    method public boolean canStartForegroundService(int, int, @NonNull String);
    method public void killSdkSandboxClientAppProcess(@NonNull android.os.IBinder);
    method @Nullable public android.content.ComponentName startSdkSandboxService(@NonNull android.content.Intent, int, @NonNull String, @NonNull String) throws android.os.RemoteException;
    method public boolean stopSdkSandboxService(@NonNull android.content.Intent, int, @NonNull String, @NonNull String);
  }

}

package com.android.server.appop {

  public interface AppOpsManagerLocal {
    method public boolean isUidInForeground(int);
  }

}

package com.android.server.art {

  public final class ArtManagerLocal {
    ctor @Deprecated public ArtManagerLocal();
    ctor public ArtManagerLocal(@NonNull android.content.Context);
    method public void addDexoptDoneCallback(boolean, @NonNull java.util.concurrent.Executor, @NonNull com.android.server.art.ArtManagerLocal.DexoptDoneCallback);
    method public void cancelBackgroundDexoptJob();
    method @NonNull public void clearAppProfiles(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String);
    method public void clearBatchDexoptStartCallback();
    method public void clearScheduleBackgroundDexoptJobCallback();
    method @NonNull public com.android.server.art.model.DeleteResult deleteDexoptArtifacts(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String);
    method @NonNull public com.android.server.art.model.DexoptResult dexoptPackage(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, @NonNull com.android.server.art.model.DexoptParams);
    method @NonNull public com.android.server.art.model.DexoptResult dexoptPackage(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, @NonNull com.android.server.art.model.DexoptParams, @NonNull android.os.CancellationSignal);
    method public void dump(@NonNull java.io.PrintWriter, @NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot);
    method public void dumpPackage(@NonNull java.io.PrintWriter, @NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String);
    method @NonNull public com.android.server.art.model.DexoptStatus getDexoptStatus(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String);
    method @NonNull public com.android.server.art.model.DexoptStatus getDexoptStatus(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, int);
    method public int handleShellCommand(@NonNull android.os.Binder, @NonNull android.os.ParcelFileDescriptor, @NonNull android.os.ParcelFileDescriptor, @NonNull android.os.ParcelFileDescriptor, @NonNull String[]);
    method public void onBoot(@NonNull String, @Nullable java.util.concurrent.Executor, @Nullable java.util.function.Consumer<com.android.server.art.model.OperationProgress>);
    method public void printShellCommandHelp(@NonNull java.io.PrintWriter);
    method public void removeDexoptDoneCallback(@NonNull com.android.server.art.ArtManagerLocal.DexoptDoneCallback);
    method public int scheduleBackgroundDexoptJob();
    method public void setBatchDexoptStartCallback(@NonNull java.util.concurrent.Executor, @NonNull com.android.server.art.ArtManagerLocal.BatchDexoptStartCallback);
    method public void setScheduleBackgroundDexoptJobCallback(@NonNull java.util.concurrent.Executor, @NonNull com.android.server.art.ArtManagerLocal.ScheduleBackgroundDexoptJobCallback);
    method @NonNull public android.os.ParcelFileDescriptor snapshotAppProfile(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, @Nullable String) throws com.android.server.art.ArtManagerLocal.SnapshotProfileException;
    method @NonNull public android.os.ParcelFileDescriptor snapshotBootImageProfile(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot) throws com.android.server.art.ArtManagerLocal.SnapshotProfileException;
    method public void startBackgroundDexoptJob();
    method public void unscheduleBackgroundDexoptJob();
  }

  public static interface ArtManagerLocal.BatchDexoptStartCallback {
    method public void onBatchDexoptStart(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, @NonNull java.util.List<java.lang.String>, @NonNull com.android.server.art.model.BatchDexoptParams.Builder, @NonNull android.os.CancellationSignal);
  }

  public static interface ArtManagerLocal.DexoptDoneCallback {
    method public void onDexoptDone(@NonNull com.android.server.art.model.DexoptResult);
  }

  public static interface ArtManagerLocal.ScheduleBackgroundDexoptJobCallback {
    method public void onOverrideJobInfo(@NonNull android.app.job.JobInfo.Builder);
  }

  public static class ArtManagerLocal.SnapshotProfileException extends java.lang.Exception {
  }

  public class ArtModuleServiceInitializer {
    method public static void setArtModuleServiceManager(@NonNull android.os.ArtModuleServiceManager);
  }

  public class DexUseManagerLocal {
    method @NonNull public static com.android.server.art.DexUseManagerLocal createInstance(@NonNull android.content.Context);
    method @NonNull public java.util.List<com.android.server.art.model.DexContainerFileUseInfo> getSecondaryDexContainerFileUseInfo(@NonNull String);
    method public void notifyDexContainersLoaded(@NonNull com.android.server.pm.PackageManagerLocal.FilteredSnapshot, @NonNull String, @NonNull java.util.Map<java.lang.String,java.lang.String>);
    method public void systemReady();
  }

  public class ReasonMapping {
    field public static final String REASON_BG_DEXOPT = "bg-dexopt";
    field public static final String REASON_BOOT_AFTER_MAINLINE_UPDATE = "boot-after-mainline-update";
    field public static final String REASON_BOOT_AFTER_OTA = "boot-after-ota";
    field public static final String REASON_CMDLINE = "cmdline";
    field public static final String REASON_FIRST_BOOT = "first-boot";
    field public static final String REASON_INACTIVE = "inactive";
    field public static final String REASON_INSTALL = "install";
    field public static final String REASON_INSTALL_BULK = "install-bulk";
    field public static final String REASON_INSTALL_BULK_DOWNGRADED = "install-bulk-downgraded";
    field public static final String REASON_INSTALL_BULK_SECONDARY = "install-bulk-secondary";
    field public static final String REASON_INSTALL_BULK_SECONDARY_DOWNGRADED = "install-bulk-secondary-downgraded";
    field public static final String REASON_INSTALL_FAST = "install-fast";
  }

}

package com.android.server.art.model {

  public class ArtFlags {
    method public static int defaultGetStatusFlags();
    field public static final int FLAG_FORCE = 16; // 0x10
    field public static final int FLAG_FOR_PRIMARY_DEX = 1; // 0x1
    field public static final int FLAG_FOR_SECONDARY_DEX = 2; // 0x2
    field public static final int FLAG_FOR_SINGLE_SPLIT = 32; // 0x20
    field public static final int FLAG_SHOULD_DOWNGRADE = 8; // 0x8
    field public static final int FLAG_SHOULD_INCLUDE_DEPENDENCIES = 4; // 0x4
    field public static final int FLAG_SKIP_IF_STORAGE_LOW = 64; // 0x40
    field public static final int PRIORITY_BACKGROUND = 40; // 0x28
    field public static final int PRIORITY_BOOT = 100; // 0x64
    field public static final int PRIORITY_INTERACTIVE = 60; // 0x3c
    field public static final int PRIORITY_INTERACTIVE_FAST = 80; // 0x50
    field public static final int SCHEDULE_DISABLED_BY_SYSPROP = 2; // 0x2
    field public static final int SCHEDULE_JOB_SCHEDULER_FAILURE = 1; // 0x1
    field public static final int SCHEDULE_SUCCESS = 0; // 0x0
  }

  public abstract class BatchDexoptParams {
    method @NonNull public abstract com.android.server.art.model.DexoptParams getDexoptParams();
    method @NonNull public abstract java.util.List<java.lang.String> getPackages();
  }

  public static final class BatchDexoptParams.Builder {
    method @NonNull public com.android.server.art.model.BatchDexoptParams build();
    method @NonNull public com.android.server.art.model.BatchDexoptParams.Builder setDexoptParams(@NonNull com.android.server.art.model.DexoptParams);
    method @NonNull public com.android.server.art.model.BatchDexoptParams.Builder setPackages(@NonNull java.util.List<java.lang.String>);
  }

  public abstract class DeleteResult {
    method public abstract long getFreedBytes();
  }

  public abstract class DexContainerFileUseInfo {
    method @NonNull public abstract String getDexContainerFile();
    method @NonNull public abstract java.util.Set<java.lang.String> getLoadingPackages();
    method @NonNull public abstract android.os.UserHandle getUserHandle();
  }

  public class DexoptParams {
    method @NonNull public String getCompilerFilter();
    method public int getFlags();
    method public int getPriorityClass();
    method @NonNull public String getReason();
    method @Nullable public String getSplitName();
    field public static final String COMPILER_FILTER_NOOP = "skip";
  }

  public static final class DexoptParams.Builder {
    ctor public DexoptParams.Builder(@NonNull String);
    ctor public DexoptParams.Builder(@NonNull String, int);
    method @NonNull public com.android.server.art.model.DexoptParams build();
    method @NonNull public com.android.server.art.model.DexoptParams.Builder setCompilerFilter(@NonNull String);
    method @NonNull public com.android.server.art.model.DexoptParams.Builder setFlags(int);
    method @NonNull public com.android.server.art.model.DexoptParams.Builder setFlags(int, int);
    method @NonNull public com.android.server.art.model.DexoptParams.Builder setPriorityClass(int);
    method @NonNull public com.android.server.art.model.DexoptParams.Builder setSplitName(@Nullable String);
  }

  public abstract class DexoptResult {
    method public int getFinalStatus();
    method @NonNull public abstract java.util.List<com.android.server.art.model.DexoptResult.PackageDexoptResult> getPackageDexoptResults();
    method @NonNull public abstract String getReason();
    method @NonNull public abstract String getRequestedCompilerFilter();
    field public static final int DEXOPT_CANCELLED = 40; // 0x28
    field public static final int DEXOPT_FAILED = 30; // 0x1e
    field public static final int DEXOPT_PERFORMED = 20; // 0x14
    field public static final int DEXOPT_SKIPPED = 10; // 0xa
  }

  public abstract static class DexoptResult.DexContainerFileDexoptResult {
    method @NonNull public abstract String getAbi();
    method @NonNull public abstract String getActualCompilerFilter();
    method public abstract long getDex2oatCpuTimeMillis();
    method public abstract long getDex2oatWallTimeMillis();
    method @NonNull public abstract String getDexContainerFile();
    method public abstract long getSizeBeforeBytes();
    method public abstract long getSizeBytes();
    method public abstract int getStatus();
    method public abstract boolean isPrimaryAbi();
  }

  public abstract static class DexoptResult.PackageDexoptResult {
    method @NonNull public abstract java.util.List<com.android.server.art.model.DexoptResult.DexContainerFileDexoptResult> getDexContainerFileDexoptResults();
    method @NonNull public abstract String getPackageName();
    method public int getStatus();
    method public boolean hasUpdatedArtifacts();
  }

  public abstract class DexoptStatus {
    method @NonNull public abstract java.util.List<com.android.server.art.model.DexoptStatus.DexContainerFileDexoptStatus> getDexContainerFileDexoptStatuses();
  }

  public abstract static class DexoptStatus.DexContainerFileDexoptStatus {
    method @NonNull public abstract String getAbi();
    method @NonNull public abstract String getCompilationReason();
    method @NonNull public abstract String getCompilerFilter();
    method @NonNull public abstract String getDexContainerFile();
    method @NonNull public abstract String getLocationDebugString();
    method public abstract boolean isPrimaryAbi();
    method public abstract boolean isPrimaryDex();
  }

  public abstract class OperationProgress {
    method public int getPercentage();
  }

}

package com.android.server.deviceconfig {

  public class DeviceConfigInit {
  }

  public static class DeviceConfigInit.Lifecycle extends com.android.server.SystemService {
    ctor public DeviceConfigInit.Lifecycle(@NonNull android.content.Context);
  }

}

package com.android.server.pm {

  public interface PackageManagerLocal {
    method public void reconcileSdkData(@Nullable String, @NonNull String, @NonNull java.util.List<java.lang.String>, int, int, int, @NonNull String, int) throws java.io.IOException;
    method @NonNull public com.android.server.pm.PackageManagerLocal.FilteredSnapshot withFilteredSnapshot();
    method @NonNull public com.android.server.pm.PackageManagerLocal.FilteredSnapshot withFilteredSnapshot(int, @NonNull android.os.UserHandle);
    method @NonNull public com.android.server.pm.PackageManagerLocal.UnfilteredSnapshot withUnfilteredSnapshot();
    field public static final int FLAG_STORAGE_CE = 2; // 0x2
    field public static final int FLAG_STORAGE_DE = 1; // 0x1
  }

  public static interface PackageManagerLocal.FilteredSnapshot extends java.lang.AutoCloseable {
    method public void close();
    method @Nullable public com.android.server.pm.pkg.PackageState getPackageState(@NonNull String);
    method @NonNull public java.util.Map<java.lang.String,com.android.server.pm.pkg.PackageState> getPackageStates();
  }

  public static interface PackageManagerLocal.UnfilteredSnapshot extends java.lang.AutoCloseable {
    method public void close();
    method @NonNull public com.android.server.pm.PackageManagerLocal.FilteredSnapshot filtered(int, @NonNull android.os.UserHandle);
    method @NonNull public java.util.Map<java.lang.String,com.android.server.pm.pkg.PackageState> getPackageStates();
  }

}

package com.android.server.pm.pkg {

  public interface AndroidPackage {
    method @Nullable public String getAppComponentFactory();
    method @Nullable public String getApplicationClassName();
    method @Nullable public String getBackupAgentName();
    method @DrawableRes public int getBannerResourceId();
    method public int getBaseRevisionCode();
    method public int getCategory();
    method @Nullable public String getClassLoaderName();
    method @Dimension(unit=android.annotation.Dimension.DP) public int getCompatibleWidthLimitDp();
    method @XmlRes public int getDataExtractionRulesResourceId();
    method @StringRes public int getDescriptionResourceId();
    method @XmlRes public int getFullBackupContentResourceId();
    method public int getGwpAsanMode();
    method @DrawableRes public int getIconResourceId();
    method @StringRes public int getLabelResourceId();
    method @Dimension(unit=android.annotation.Dimension.DP) public int getLargestWidthLimitDp();
    method @NonNull public java.util.List<java.lang.String> getLibraryNames();
    method @XmlRes public int getLocaleConfigResourceId();
    method @DrawableRes public int getLogoResourceId();
    method public long getLongVersionCode();
    method public float getMaxAspectRatio();
    method public float getMinAspectRatio();
    method public int getNativeHeapZeroInitialized();
    method @XmlRes public int getNetworkSecurityConfigResourceId();
    method @Nullable public String getRequiredAccountType();
    method @Dimension(unit=android.annotation.Dimension.DP) public int getRequiresSmallestWidthDp();
    method @Nullable public String getRestrictedAccountType();
    method @DrawableRes public int getRoundIconResourceId();
    method @Nullable public String getSdkLibraryName();
    method @Nullable public String getSharedUserId();
    method @StringRes public int getSharedUserLabelResourceId();
    method @NonNull public java.util.List<com.android.server.pm.pkg.AndroidPackageSplit> getSplits();
    method @Nullable public String getStaticSharedLibraryName();
    method @NonNull public java.util.UUID getStorageUuid();
    method public int getTargetSdkVersion();
    method @StyleRes public int getThemeResourceId();
    method public int getUiOptions();
    method @Nullable public String getVersionName();
    method @Nullable public String getZygotePreloadName();
    method public boolean is32BitAbiPreferred();
    method public boolean isAllowAudioPlaybackCapture();
    method public boolean isAllowNativeHeapPointerTagging();
    method public boolean isAnyDensity();
    method public boolean isAttributionsUserVisible();
    method public boolean isBackupAllowed();
    method public boolean isBackupInForeground();
    method public boolean isClearUserDataAllowed();
    method public boolean isClearUserDataOnFailedRestoreAllowed();
    method public boolean isCleartextTrafficAllowed();
    method public boolean isCoreApp();
    method public boolean isCrossProfile();
    method public boolean isDebuggable();
    method public boolean isDeclaredHavingCode();
    method public boolean isDefaultToDeviceProtectedStorage();
    method public boolean isDirectBootAware();
    method public boolean isExtraLargeScreensSupported();
    method public boolean isExtractNativeLibrariesRequested();
    method public boolean isFactoryTest();
    method public boolean isForceQueryable();
    method public boolean isFullBackupOnly();
    method public boolean isHardwareAccelerated();
    method public boolean isIsolatedSplitLoading();
    method public boolean isKillAfterRestoreAllowed();
    method public boolean isLargeHeap();
    method public boolean isLargeScreensSupported();
    method public boolean isLeavingSharedUser();
    method public boolean isMultiArch();
    method public boolean isNativeLibraryRootRequiresIsa();
    method public boolean isNonSdkApiRequested();
    method public boolean isNormalScreensSupported();
    method public boolean isOnBackInvokedCallbackEnabled();
    method public boolean isPersistent();
    method public boolean isProfileable();
    method public boolean isProfileableByShell();
    method public boolean isRequestLegacyExternalStorage();
    method public boolean isRequiredForAllUsers();
    method public boolean isResetEnabledSettingsOnAppDataCleared();
    method public boolean isResourceOverlay();
    method public boolean isRestoreAnyVersion();
    method public boolean isRtlSupported();
    method public boolean isSaveStateDisallowed();
    method public boolean isSignedWithPlatformKey();
    method public boolean isSmallScreensSupported();
    method public boolean isTaskReparentingAllowed();
    method public boolean isTestOnly();
    method public boolean isUseEmbeddedDex();
    method public boolean isUserDataFragile();
    method public boolean isVmSafeMode();
  }

  public interface AndroidPackageSplit {
    method @Nullable public String getClassLoaderName();
    method @NonNull public java.util.List<com.android.server.pm.pkg.AndroidPackageSplit> getDependencies();
    method @Nullable public String getName();
    method @NonNull public String getPath();
    method public int getRevisionCode();
    method public boolean isHasCode();
  }

  public interface PackageState {
    method @Nullable public com.android.server.pm.pkg.AndroidPackage getAndroidPackage();
    method public int getAppId();
    method public int getHiddenApiEnforcementPolicy();
    method @NonNull public String getPackageName();
    method @Nullable public String getPrimaryCpuAbi();
    method @Nullable public String getSeInfo();
    method @Nullable public String getSecondaryCpuAbi();
    method @NonNull public java.util.List<com.android.server.pm.pkg.SharedLibrary> getSharedLibraryDependencies();
    method @NonNull public com.android.server.pm.pkg.PackageUserState getStateForUser(@NonNull android.os.UserHandle);
    method public boolean isApex();
    method public boolean isPrivileged();
    method public boolean isSystem();
    method public boolean isUpdatedSystemApp();
  }

  public interface PackageUserState {
    method public long getFirstInstallTimeMillis();
    method public boolean isInstalled();
  }

  public interface SharedLibrary {
    method @NonNull public java.util.List<java.lang.String> getAllCodePaths();
    method @NonNull public android.content.pm.VersionedPackage getDeclaringPackage();
    method @NonNull public java.util.List<com.android.server.pm.pkg.SharedLibrary> getDependencies();
    method @NonNull public java.util.List<android.content.pm.VersionedPackage> getDependentPackages();
    method @Nullable public String getName();
    method @Nullable public String getPackageName();
    method @Nullable public String getPath();
    method public int getType();
    method public long getVersion();
    method public boolean isNative();
  }

}

package com.android.server.role {

  public interface RoleServicePlatformHelper {
    method @NonNull public String computePackageStateHash(int);
    method @NonNull public java.util.Map<java.lang.String,java.util.Set<java.lang.String>> getLegacyRoleState(int);
  }

}

package com.android.server.sdksandbox {

  public interface SdkSandboxManagerLocal {
    method public boolean canAccessContentProviderFromSdkSandbox(@NonNull android.content.pm.ProviderInfo);
    method public boolean canRegisterBroadcastReceiver(@NonNull android.content.IntentFilter, int, boolean);
    method public boolean canSendBroadcast(@NonNull android.content.Intent);
    method public void enforceAllowedToHostSandboxedActivity(@NonNull android.content.Intent, int, @NonNull String);
    method @Deprecated public void enforceAllowedToSendBroadcast(@NonNull android.content.Intent);
    method public void enforceAllowedToStartActivity(@NonNull android.content.Intent);
    method public void enforceAllowedToStartOrBindService(@NonNull android.content.Intent);
    method @NonNull public String getSdkSandboxProcessNameForInstrumentation(@NonNull android.content.pm.ApplicationInfo);
    method public void notifyInstrumentationFinished(@NonNull String, int);
    method public void notifyInstrumentationStarted(@NonNull String, int);
    field public static final String SERVICE_INTERFACE = "com.android.sdksandbox.SdkSandboxService";
    field public static final String VERIFIER_RECEIVER = "com.android.server.sdksandbox.SdkSandboxVerifierReceiver";
  }

}

package com.android.server.security {

  public final class FileIntegrity {
    method public static void setUpFsVerity(@NonNull java.io.File) throws java.io.IOException;
    method public static void setUpFsVerity(@NonNull android.os.ParcelFileDescriptor) throws java.io.IOException;
  }

}

package com.android.server.stats {

  public final class StatsHelper {
    method public static void sendStatsdReadyBroadcast(@NonNull android.content.Context);
  }

}

package com.android.server.usage {

  public interface StorageStatsManagerLocal {
    method public void registerStorageStatsAugmenter(@NonNull com.android.server.usage.StorageStatsManagerLocal.StorageStatsAugmenter, @NonNull String);
  }

  public static interface StorageStatsManagerLocal.StorageStatsAugmenter {
    method public void augmentStatsForPackageForUser(@NonNull android.content.pm.PackageStats, @NonNull String, @NonNull android.os.UserHandle, boolean);
    method public void augmentStatsForUid(@NonNull android.content.pm.PackageStats, int, boolean);
    method public void augmentStatsForUser(@NonNull android.content.pm.PackageStats, @NonNull android.os.UserHandle);
  }

}

package com.android.server.wifi {

  public class SupplicantManager {
    method public static void start();
    method public static void stop();
  }

}

package com.android.server.wm {

  public interface ActivityInterceptorCallback {
    method public default void onActivityLaunched(@NonNull android.app.TaskInfo, @NonNull android.content.pm.ActivityInfo, @NonNull com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo);
    method @Nullable public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptResult onInterceptActivityLaunch(@NonNull com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo);
    field public static final int MAINLINE_SDK_SANDBOX_ORDER_ID = 1001; // 0x3e9
  }

  public static final class ActivityInterceptorCallback.ActivityInterceptResult {
    ctor public ActivityInterceptorCallback.ActivityInterceptResult(@NonNull android.content.Intent, @NonNull android.app.ActivityOptions, boolean);
    method @NonNull public android.app.ActivityOptions getActivityOptions();
    method @NonNull public android.content.Intent getIntent();
    method public boolean isActivityResolved();
  }

  public static final class ActivityInterceptorCallback.ActivityInterceptorInfo {
    method @NonNull public android.content.pm.ActivityInfo getActivityInfo();
    method @Nullable public String getCallingFeatureId();
    method @Nullable public String getCallingPackage();
    method public int getCallingPid();
    method public int getCallingUid();
    method @Nullable public android.app.ActivityOptions getCheckedOptions();
    method @Nullable public Runnable getClearOptionsAnimationRunnable();
    method @NonNull public android.content.Intent getIntent();
    method public int getRealCallingPid();
    method public int getRealCallingUid();
    method @NonNull public android.content.pm.ResolveInfo getResolveInfo();
    method @Nullable public String getResolvedType();
    method public int getUserId();
  }

  public static final class ActivityInterceptorCallback.ActivityInterceptorInfo.Builder {
    ctor public ActivityInterceptorCallback.ActivityInterceptorInfo.Builder(int, int, int, int, int, @NonNull android.content.Intent, @NonNull android.content.pm.ResolveInfo, @NonNull android.content.pm.ActivityInfo);
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo build();
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo.Builder setCallingFeatureId(@Nullable String);
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo.Builder setCallingPackage(@Nullable String);
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo.Builder setCheckedOptions(@Nullable android.app.ActivityOptions);
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo.Builder setClearOptionsAnimationRunnable(@Nullable Runnable);
    method @NonNull public com.android.server.wm.ActivityInterceptorCallback.ActivityInterceptorInfo.Builder setResolvedType(@Nullable String);
  }

  public class ActivityInterceptorCallbackRegistry {
    method @NonNull public static com.android.server.wm.ActivityInterceptorCallbackRegistry getInstance();
    method public void registerActivityInterceptorCallback(int, @NonNull com.android.server.wm.ActivityInterceptorCallback);
    method public void unregisterActivityInterceptorCallback(int);
  }

}

